{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u8fd9\u662f\u9ec4\u68a6\u6587\u7684\u7f51\u7ad9\uff0c\u8fd9\u662f\u9996\u9875\u7684\u5185\u5bb9","text":"<p>GITHUB-PAGE</p>"},{"location":"Atcoder/contest413/","title":"Contest413","text":"<p>contest413</p>"},{"location":"Atcoder/contest413/#a","title":"A","text":"<p>\u5148\u6c42\u548c\uff0c\u7136\u540e\u6bd4\u5927\u5c0f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n#define int long long\nconst int N = 110;\nint n , m ,t;\nvoid solve() {\n    int sum = 0;\n    cin &gt;&gt; n&gt;&gt; m;for (int i = 1;i &lt;= n;i++){cin &gt;&gt; t;sum+=t;}\n    if (sum &gt; m)cout &lt;&lt; \"No\";\n    else cout &lt;&lt; \"Yes\" ;\n}\nsigned main() {\n    solve();return 0;\n}\n</code></pre>"},{"location":"Atcoder/contest413/#b","title":"B","text":"<p>\u66b4\u529b\u6c42\u89e3\uff0c\u6c42\u51fa\u6240\u6709\u53ef\u80fd\uff0c\u5e76\u6d88\u53bb\u76f8\u540c\u7684\u7ed3\u679c</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint n,num = 0;\nstring s[110];\nstring ss[11000];\nbool check(string t) {\n    for (int i = 1;i &lt;= num;i++) {\n        if (ss[i] == t)return false;\n    }\n    return true;\n}\nvoid solve() {\n    cin &gt;&gt; n;\n    for (int i = 1;i &lt;= n;i++)cin &gt;&gt; s[i];\n    for (int i = 1;i &lt; n;i++) {\n        for (int j = i +1 ;j &lt;= n;j++) {\n            string t;t = s[i]+s[j];if (check(t))ss[++num] = t;\n            t = s[j] + s[i];if (check(t))ss[++num] = t;\n        }\n    }\n    cout &lt;&lt; num;\n}\nsigned main() {\n    solve();return 0;\n}\n</code></pre>"},{"location":"Atcoder/contest413/#c","title":"C","text":"<p>\u5f00\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u5b58c\u548cx\uff0c\u4ece\u5934\u5f00\u59cb\u8ba1\u7b97c\u7684\u7d2f\u52a0\u548c\uff0c\u4e0ek\u6bd4\u8f83\uff0c\u5b50\u7ed3\u8bba\u76f8\u4e58\uff0c\u8f93\u51fa\u7ed3\u679c\uff0c\u66f4\u65b0\u7b2cc[i]\u7684\u503c\uff0c\u4fdd\u8bc1\u4e0b\u4e00\u6b21\u4ecec[i]\u5f00\u59cb\u8ba1\u7b97</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 2e5+10;\n#define int long long\nint q,a[N],b[N],num = 0;\nvoid solve() {\n    cin &gt;&gt; q;int flag = 1;\n    while (q--) {\n        int x,k;cin &gt;&gt; x;\n        if (x == 1) {\n            ++num;cin &gt;&gt; a[num] &gt;&gt; b[num];\n        }\n        else {\n            cin &gt;&gt; k;int sum = 0,numm = 0;\n            for (int i = flag;i &lt;= num;i++) {\n                numm += a[i];\n                if (numm &lt; k){sum+=a[i] * b[i];continue;}\n                else {\n                    int t = a[i];\n                    flag = i;\n                    a[flag] = numm - k;\n                    sum += (t-a[flag]) * b[i];\n                    break;\n                }\n            }\n            cout &lt;&lt; sum &lt;&lt; endl;\n        }\n    }\n}\nsigned main() {\n    solve();return 0;\n}\n</code></pre>"},{"location":"Atcoder/contest413/#d","title":"D","text":"<p>\u5bf9\u7ed9\u5b9a\u5e8f\u5217\u6309\u7167\u7edd\u5bf9\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7279\u6b8a\u8ba8\u8bba\u6240\u6709\u5143\u7d20\u7684\u7edd\u5bf9\u503c\u5747\u76f8\u540c\u7684\u7279\u6b8a\u60c5\u51b5</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n#define int long long\nconst int N = 2e5+10;\nint t,n;\nstruct Node{\n    int x;\n    int flag = 0;\n    bool operator&lt;(const Node &amp;other) const {\n        return x &lt; other.x; // \u6309x\u5347\u5e8f\u6392\u5217\n    }\n}a[N];\nvoid solve() {\n    int x = 0,y = 0;\n    cin &gt;&gt; n;for (int i = 1;i &lt;= n;i++)a[i].flag = 0;\n    for (int i = 1;i &lt;= n;i++) {\n        cin &gt;&gt; a[i].x;if (a[i].x &lt; 0){x++;a[i].flag = 1;a[i].x = abs(a[i].x);}else{y++;}\n    }\n    int num=abs(a[1].x);\n    int flag=1;\n    for(int i=2;i&lt;=n;i++)\n        if(abs(a[i].x)!=num){\n            flag=0;\n            break;\n        }\n    if(flag){\n        if(x==y||abs(x-y)==1||x==n||y==n) cout&lt;&lt;\"Yes\" &lt;&lt; endl;\n        else cout&lt;&lt;\"No\" &lt;&lt; endl;return;\n    }\n    flag = 0;sort(a+1,a+n+1);\n    for (int i = 1;i &lt;= n;i++) {\n        if(a[i].flag)a[i].x = 0 - a[i].x;\n    }\n    for (int i = 3;i &lt;= n;i++) {\n        if(a[i].x * a[1].x == a[i-1].x * a[2].x)continue;\n        else {\n            flag = 1;cout &lt;&lt; \"No\" &lt;&lt; endl;return;\n        }\n    }\n    if (flag == 0)cout &lt;&lt; \"Yes\" &lt;&lt; endl;\n}\nsigned main() {\n    cin &gt;&gt; t;while (t--)solve();return 0;\n}\n</code></pre>"},{"location":"Atcoder/contest414/","title":"Contest414","text":""},{"location":"Atcoder/contest414/#a","title":"A","text":"<p>\u7edf\u8ba1\u5305\u542b\u533a\u95f4\u3010L\uff5eR\u3011\u533a\u95f4\u4e2a\u6570\uff0c\u8f93\u51fa\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n#define int long long\nconst int N = 1010;\nint n,x,y,xx,yy;\nvoid solve(){\n    int num = 0;cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;\n    for (int i = 1;i &lt;= n;i++) {\n        cin &gt;&gt; xx &gt;&gt; yy;if (xx &lt;= x &amp;&amp; yy &gt;= y)num++;\n    }\n    cout &lt;&lt; num ;\n}\nsigned main(){\n    solve();return 0;\n}\n</code></pre>"},{"location":"Atcoder/contest414/#b","title":"B","text":"<p>\u907f\u514d\u8d85\u65f6\uff0c\u5148\u8fdb\u884c\u957f\u5ea6\u7684\u8ba1\u7b97\uff0c\u5982\u679c\u6dfb\u52a0\u540e\u7684\u957f\u5ea6\u5c0f\u4e8e100\uff0c\u518d\u6dfb\u52a0\uff0c\u5927\u4e8e100\u76f4\u63a5continue\uff0c\u6700\u540e\u8f93\u51fa\u7ed3\u679c\u5373\u53ef\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\nusing namespace std;\n#define int long long\nstring s;\nvoid solve() {\n    int n;cin &gt;&gt; n;\n    string c;int num = 0,cnt = 0;\n    while (n--) {\n        cin &gt;&gt; c &gt;&gt; num;\n        if (cnt &gt; 100)continue;\n        else cnt+=num;\n        if (cnt &gt; 100)continue;\n        else for (int i = 0;i &lt; num;i++)s+=c;\n    }\n    if (cnt &gt; 100)cout &lt;&lt; \"Too Long\";\n    else cout &lt;&lt; s;\n}\nsigned main() {\n    solve();return 0;\n}\n</code></pre>"},{"location":"Atcoder/contest414/#c","title":"C","text":"<p>\u4f18\u5316\u6c42\u89e3\u56de\u6587\u6570\u7684\u65b9\u5f0f\uff0c\u5bf9\u4e8e\u5927\u4e8e\u4e8c\u4f4d\u4ee5\u4e0a\u7684\u6570\u5b57\uff0c\u91c7\u53d6\u5148\u6c42\u89e3\u5076\u6570\u4f4d\u6570\u56de\u6587\u6570\uff0c\u5728\u6c42\u89e3\u5947\u6570\u4f4d\u6570\u56de\u6587\u6570\u7684\u65b9\u5f0f\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230O(sqrt(n)),\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\nusing namespace std;\n#define int long long\nint a,n,sum = 0;\nconst string digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nbool isPds(int num) {\n    string s = to_string(num);\n    string rev = s;\n    ranges::reverse(rev);\n    return s == rev;\n}\nbool ispd(string a) {\n    string b = a;ranges::reverse(a);\n    return b == a;\n}\nstring ct(int num) {\n    string result;\n    if (n == 0)return \"0\";\n    while (num &gt; 0) {\n        result += digits[num%a];\n        num/=a;\n    }\n    return result;\n}\nbool check(int u) {\n    if (isPds(u)) {\n        if (ispd(ct(u)))return true;\n    }\n    return false;\n}\nvoid solve() {\n    cin &gt;&gt; a &gt;&gt; n;\n    for (int i = 1;i &lt;= n;i++) {\n        if (i &gt;= 10)break;\n        if (i &lt; 10 &amp;&amp; check(i))sum+=i;\n    }\n    for (int i = 1;;++i) {\n        string s = to_string(i);\n        string revs(s.rbegin(),s.rend());\n        if (s.length() &lt;= 9) {\n            int ep = stoll(s + revs);\n            if (ep &gt; n)break;\n            else if (check(ep))sum+=ep;\n        }\n        else break;\n        if (s.length() &lt;= 7) {\n            for (char mid = '0'; mid &lt;= '9'; ++mid) {\n                int op = stoll(s + mid + revs);\n                if (op &gt; n) continue;\n                else if(check(op))sum+=op;\n            }\n        }\n        else break;\n    }\n    cout &lt;&lt; sum;\n}\nsigned main() {\n    solve();return 0;\n}\n</code></pre>"},{"location":"Atcoder/contest414/#d","title":"D","text":"<p>\u5c06\u95ee\u9898\u7b80\u5316\u4e3a\u7528\u603b\u957f\u5ea6\u51cf\u53bbm\u4e2a\u6700\u5927\u7684\u95f4\u9694\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\uff0c\u6211\u4eec\u6709m\u4e2a\u57fa\u7ad9\uff0c\u90a3\u4e48\u591a\u4e2a\u623f\u5c4b\u4e4b\u95f4\u5177\u6709\u4e0d\u540c\u7684\u8ddd\u79bb\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u6743\u9009\u62e9m-1\u4e2a\u95f4\u9694\u4e0d\u8986\u76d6\uff0c\u53ea\u8986\u76d6\u9664\u4e86\u8fd9m\u4e2a\u95f4\u9694\u4ee5\u5916\u7684\u5730\u65b9\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u623f\u5b50\u90fd\u4f1a\u88ab\u57fa\u7ad9\u8986\u76d6\u5230\u3002\u5373\u5bf9\u4e8e\u4efb\u610f\u7684\u4e24\u4e2a\u57fa\u7ad9\u653e\u7f6e\u4ee5\u540e\uff0c\u8fd9\u4e24\u4e2a\u57fa\u7ad9\u4e4b\u95f4\u6709\u4e00\u5757\u7a7a\u5730\u53ef\u4ee5\u4e0d\u88ab\u8986\u76d6\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\nusing namespace std;\nconst int N = 5e5+10;\n#define int long long\nint x[N],y[N];\nint n,m;\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; m;for (int i = 1;i &lt;= n;i++)cin &gt;&gt; x[i];\n    if (n &lt;= m){cout &lt;&lt; \"0\";return;}\n    sort(x+1,x+n+1);\n    for(int i = 1;i &lt; n;i++)y[i] = x[i + 1]-x[i];\n    int result = x[n] - x[1];\n    sort(y+1,y+n);\n    for(int i = n-1;i &gt;=n - m + 1;--i)result -= y[i];\n    cout &lt;&lt; result &lt;&lt; endl;\n}\nsigned main() {\n     solve();return 0;\n}\n</code></pre>"},{"location":"Atcoder/contest414/#e","title":"E","text":"<p>\u5c06\u95ee\u9898\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230O(sqrt(n)),\u5148\u7edf\u8ba1\u6240\u6709\u8981\u5220\u9664\u7684\u91cd\u590d\u7684\u6570\u91cf\uff0c\u5305\u62ec\uff08\u5982\u679ci * i == a \u4e14a &lt;= n,\u5219\u5220\u9664 (a, i ,i).    \u5982\u679ca % i == 0,\u5219\u5220\u9664\uff08a,i,a/i) \u548c(a,a/i,i)\uff0c\u907f\u514d\u91cd\u590d\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u8ba1\u7b97\u65b0\u7684i\u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u5220\u9664\u90a3\u4e9b\u6bd4\u4ed6\u672c\u8eab\u5c0f\u7684\u53ef\u80fd\u6027\uff0c\u56e0\u4e3a\u4e00\u5171\u4e24\u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u5220\u9664\u7684\u6570\u91cf\u4e3a\uff08n/i - i + 1\uff09* 2  - 1\uff09\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n#define int long long\nconst int mod = 998244353;\nint n;\nvoid solve() {\n    cin &gt;&gt; n;int sum = 0,ans = 0;\n    for (int i = 2;i * i &lt;= n;i++) {\n        if (i * i == n){sum+=1;break;}\n        else sum += ((n/i - i + 1)*2 - 1);\n        sum %= mod;\n    }\n    n %= mod;ans = (n-1)*(n - 2)/2;\n    (ans-=sum)%=mod;\n    cout &lt;&lt; ans;\n}\nsigned main() {\n    solve();return 0;\n}\n</code></pre>"},{"location":"Atcoder/round180/","title":"Round180","text":"<p>test</p> <p>this is my info here.</p>"},{"location":"Codeforces/round1034/","title":"A","text":"<p>\u5192\u6ce1\u6392\u5e8f <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n#define int long long\nconst int N = 1e5+10;\nint n,a[N];\nvoid solve(){\n    cin &gt;&gt; n;for(int i = 1;i &lt;= n;i++)cin &gt;&gt; a[i];\n    for(int i = 1;i &lt; n;i++){\n        for (int j = 1;j &lt; n - i;j++){\n            if(a[j] &gt; a[j + 1]){\n                int temp = a[j];a[j] = a[j + 1];a[j + 1] = temp;\n            }\n        }\n    }\n}\nsigned main(){int _;cin &gt;&gt; _;while(_--)solve();return 0;}\n</code></pre></p>"},{"location":"algorithms/round180/","title":"A","text":"<pre><code>#include &lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include &lt;cstring&gt;\nusing namespace std;\nconst int N = 1010;\n#define int long long\nvoid solve(){\n    int n,a[N];\n    cin &gt;&gt; n;for(int i = 1;i &lt;= n;i++)cin &gt;&gt; a[i];\n}\nsigned main(){int _;cin &gt;&gt; _;while(_--)solve();return 0;}\n</code></pre>"},{"location":"algorithms/%E5%B9%B6%E6%9F%A5%E9%9B%86/","title":"\u5e76\u67e5\u96c6","text":""},{"location":"algorithms/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_1","title":"\u5e76\u67e5\u96c6","text":"<p>\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u7528\u4e8e\u7ba1\u7406\u5143\u7d20\u6240\u5c5e\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u68ee\u6797\uff0c\u5176\u4e2d\u6bcf\u68f5\u6811\u8868\u793a\u4e00\u4e2a\u96c6\u5408\uff0c\u6811\u4e2d\u7684\u8282\u70b9\u8868\u793a\u5bf9\u5e94\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002</p>"},{"location":"algorithms/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_2","title":"\u8def\u5f84\u538b\u7f29\u4f18\u5316","text":"<pre><code># \u5e76\u67e5\u96c6\u7528\u4e8e\u5feb\u901f\u5224\u65ad\u4e00\u4e2a\u56fe\u4e2d\u7684\u4e24\u4e2a\u70b9\u662f\u5426\u8054\u901a\n#\u8def\u7ecf\u538b\u7f29\u4f18\u5316\n#\u9898\u89e3\uff08https://www.luogu.com.cn/problem/solution/P3367\uff09\nimport sys\ndef find(fa, x):\n    if fa[x] == x:\n        return x\n    fa[x] = find(fa, fa[x])\n    return fa[x]\ndef solve():\n    # \u8bfb\u53d6 n (\u5143\u7d20\u6570\u91cf) \u548c m (\u64cd\u4f5c\u6b21\u6570)\n    data = sys.stdin.readline().split()\n    n, m = map(int, data)\n    # \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    fa = [i for i in range(n + 1)]\n    for _ in range(m):\n        op, x, y = map(int, sys.stdin.readline().split())\n        if op == 1: # \u64cd\u4f5c 1\uff1a\u5408\u5e76\u96c6\u5408 (Union)\n            root_x = find(fa, x)\n            root_y = find(fa, y)\n            if root_x != root_y:\n                fa[root_x] = root_y\n        elif op == 2: # \u64cd\u4f5c 2\uff1a\u67e5\u8be2\u662f\u5426\u8fde\u901a (Check Connection)\n            root_x = find(fa, x)\n            root_y = find(fa, y)\n            if root_x == root_y:\n                print(\"Y\")\n            else:\n                print(\"N\")\nif __name__ == '__main__':\n    solve()\n</code></pre>"},{"location":"algorithms/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_3","title":"\u6309\u79e9\u5408\u5e76\u4f18\u5316","text":"<pre><code>import sys\ndef find(fa, x):\n    if fa[x] == x:\n        return x\n    fa[x] = find(fa, fa[x])\n    return fa[x]\ndef solve():\n    data = sys.stdin.readline().split()\n    n, m = map(int, data)\n    #\u521d\u59cb\u5316fa\u6570\u7ec4\n    fa = [i for i in range(n + 1)]\n    #siz\u7528\u4e8e\u8bb0\u5f55\u8be5\u8282\u70b9\u4e3a\u6839\u7ed3\u70b9\u7684\u6811\u7684\u9ad8\u5ea6\n    siz = [1] * (n + 1)\n    #\u4ee5\u4e0b\u662f\u6309\u9ad8\u5ea6\u5408\u5e76\u7684\u65b9\u5f0f\u8fdb\u884c\u4f18\u5316\n    for _ in range(m):\n        op, x, y = map(int, sys.stdin.readline().split())\n        if op == 1:\n            root_x = find(fa, x)\n            root_y = find(fa, y)\n            if root_x == root_y:\n                continue\n            if siz[root_y] &lt; siz[root_x]:\n                root_x, root_y = root_y, root_x\n            fa[root_x] = root_y\n            if siz[root_y] == siz[root_x]:\n                siz[root_y] += 1\n        elif op == 2:\n            root_x = find(fa, x)\n            root_y = find(fa, y)\n            if root_x == root_y:\n                print(\"Y\")\n            else:\n                print(\"N\")\nif __name__ == '__main__':\n    solve()\n</code></pre>"},{"location":"algorithms/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"algorithms/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_1","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>\u62d3\u6251\u6392\u5e8f\u6b65\u9aa4\uff1a</p> <ol> <li>\u4ece\u56fe\u4e2d\u9009\u62e9\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9</li> <li>\u8f93\u51fa\u8be5\u9876\u70b9\uff0c\u4ece\u56fe\u4e2d\u5220\u9664\u6b64\u9876\u70b9\u53ca\u5176\u6240\u6709\u7684\u51fa\u8fb9\u3002</li> </ol> <pre><code>#\u6a21\u7248\uff1ahttps://www.luogu.com.cn/problem/B3644\nimport sys\nimport queue\ndef solve():\n    #\u5efa\u56fe deg\u5b58\u50a8\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\n    n = int(input())\n    e = [[] for _ in range (110)]\n    deg = [0] * 110\n    for i in range(1,n + 1):\n        a = list(map(int ,input().split()))\n        for _ in a:\n            if _ != 0:\n                e[i].append(_)\n                deg[_]+=1\n    q = queue.Queue()\n    for i in range(1,n + 1):\n        if deg[i] == 0:q.put(i)\n    while not q.empty():\n        t = q.get()#q.get()\u76f8\u5f53\u4e8e\u83b7\u53d6\u961f\u5934\u5143\u7d20\u5e76\u5f39\u51fa\n        print(t ,end = ' ')\n        for i in e[t]:\n            deg[i]-=1\n            if deg[i] == 0:\n                q.put(i)\nif __name__ == '__main__':\n    solve()\n</code></pre> <pre><code>#\u4f8b\u9898\uff1ahttps://www.luogu.com.cn/problem/P1347\nimport queue\ndef topological_sort_check(n, e, deg_in, st):\n    deg = deg_in[:]\n    q = queue.Queue()\n    dist = []\n    # \u7edf\u8ba1\u56fe\u4e2d\u5b9e\u9645\u5b58\u5728\u7684\u8282\u70b9\u6570\n    nodes_present = 0\n    for i in range(1, 27):\n        if st[i]:\n            nodes_present += 1\n            if deg[i] == 0:\n                q.put(i)\n    # \u68c0\u67e5\u552f\u4e00\u6027\uff1a\u521d\u59cb\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\u591a\u4e8e1\u4e2a\uff0c\u5219\u4e0d\u552f\u4e00\n    is_unique = q.qsize() &lt;= 1\n    while not q.empty():\n        # \u68c0\u67e5\u552f\u4e00\u6027\uff1a\u5982\u679c\u961f\u5217\u4e2d\u8282\u70b9\u591a\u4e8e1\u4e2a\uff0c\u5219\u4e0d\u552f\u4e00\n        if q.qsize() &gt; 1:\n            is_unique = False\n        u = q.get()\n        dist.append(u)\n        for v in e[u]:\n            deg[v] -= 1\n            if deg[v] == 0:\n                q.put(v)\n    # 1. \u4e0d\u4e00\u81f4\u6027\uff08\u5b58\u5728\u73af\uff09\uff1a\u5df2\u6392\u5e8f\u8282\u70b9\u6570\u5c0f\u4e8e\u56fe\u4e2d\u7684\u603b\u8282\u70b9\u6570\n    if len(dist) &lt; nodes_present:\n        return \"INCONSISTENCY\", None\n\n    # 2. \u786e\u5b9a\u6392\u5e8f\uff1a\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6 (\u8282\u70b9\u6570\u8fbe\u5230N, \u6392\u5e8f\u5b8c\u6210, \u6392\u5e8f\u552f\u4e00)\n    if nodes_present == n and len(dist) == n and is_unique:\n        sorted_sequence = \"\".join([chr(i + ord('A') - 1) for i in dist])\n        return \"DETERMINED\", sorted_sequence\n    # 3. \u5c1a\u672a\u786e\u5b9a\n    return \"UNDETERMINED\", None\ndef solve():\n    n, m = map(int, input().split())\n    st = [False] * 27  # \u8282\u70b9\u662f\u5426\u51fa\u73b0\n    deg = [0] * 27  # \u539f\u59cb\u5165\u5ea6\u6570\u7ec4\n    e = [[] for i in range(27)]  # \u90bb\u63a5\u8868\n\n    # flag\u7528\u4e8e\u5728\u627e\u5230\u7ed3\u679c\u540e\uff0c\u8df3\u8fc7\u540e\u7eed\u5904\u7406\n    flag = False\n\n    for _ in range(m):\n        if flag:\n            # \u627e\u5230\u7ed3\u679c\u540e\uff0c\u53ea\u8bfb\u53d6\u8f93\u5165\uff0c\u4e0d\u518d\u8fdb\u884c\u68c0\u67e5\n            input()\n            continue\n\n        s = input()\n        a = ord(s[0]) - ord('A') + 1\n        b = ord(s[2]) - ord('A') + 1\n\n        # \u8ddf\u8e2a\u5df2\u51fa\u73b0\u7684\u8282\u70b9\n        st[a] = True\n        st[b] = True\n\n        # \u6dfb\u52a0\u8fb9\u548c\u66f4\u65b0\u539f\u59cb\u5165\u5ea6\n        if s[1] == '&gt;':  # B &lt; A (B -&gt; A)\n            deg[a] += 1\n            e[b].append(a)\n        else:  # A &lt; B (A -&gt; B)\n            deg[b] += 1\n            e[a].append(b)\n\n        # \u68c0\u67e5\u5f53\u524d\u56fe\u7684\u72b6\u6001\n        status, sequence = topological_sort_check(n, e, deg, st)\n\n        if status == \"DETERMINED\":\n            print(f\"Sorted sequence determined after {_ + 1} relations: {sequence}.\")  # \u6ce8\u610f\u9898\u76ee\u8981\u6c42\u672b\u5c3e\u6709'.'\n            flag = True\n        elif status == \"INCONSISTENCY\":\n            print(f\"Inconsistency found after {_ + 1} relations.\")\n            flag = True\n    if not flag:\n        print(\"Sorted sequence cannot be determined.\")\nif __name__ == '__main__':\n    solve()\n</code></pre>"},{"location":"algorithms/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/","title":"\u5355\u6e90\u6700\u77ed\u8def","text":""},{"location":"algorithms/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#bellman-ford","title":"Bellman-Ford","text":"<p>Bellman\u2013Ford \u7b97\u6cd5\u6240\u505a\u7684\uff0c\u5c31\u662f\u4e0d\u65ad\u5c1d\u8bd5\u5bf9\u56fe\u4e0a\u6bcf\u4e00\u6761\u8fb9\u8fdb\u884c\u677e\u5f1b\u3002\u6211\u4eec\u6bcf\u8fdb\u884c\u4e00\u8f6e\u5faa\u73af\uff0c\u5c31\u5bf9\u56fe\u4e0a\u6240\u6709\u7684\u8fb9\u90fd\u5c1d\u8bd5\u8fdb\u884c\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\uff0c\u5f53\u4e00\u6b21\u5faa\u73af\u4e2d\u6ca1\u6709\u6210\u529f\u7684\u677e\u5f1b\u64cd\u4f5c\u65f6\uff0c\u7b97\u6cd5\u505c\u6b62\u3002</p> <p>\u5982\u679c\u7b2c \ud835\udc5b \u8f6e\u5faa\u73af\u65f6\u4ecd\u7136\u5b58\u5728\u80fd\u677e\u5f1b\u7684\u8fb9\uff0c\u8bf4\u660e\u4ece \ud835\udc46 \u70b9\u51fa\u53d1\uff0c\u80fd\u591f\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\u3002(\u5e38\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af)</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4ee5 \ud835\udc46 \u70b9\u4e3a\u6e90\u70b9\u8dd1 Bellman\u2013Ford \u7b97\u6cd5\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u51fa\u5b58\u5728\u8d1f\u73af\u7684\u7ed3\u679c\uff0c\u53ea\u80fd\u8bf4\u660e\u4ece \ud835\udc46 \u70b9\u51fa\u53d1\u4e0d\u80fd\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\uff0c\u800c\u4e0d\u80fd\u8bf4\u660e\u56fe\u4e0a\u4e0d\u5b58\u5728\u8d1f\u73af\u3002</p> <p>\u56e0\u6b64\u5982\u679c\u9700\u8981\u5224\u65ad\u6574\u4e2a\u56fe\u4e0a\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u6700\u4e25\u8c28\u7684\u505a\u6cd5\u662f\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff0c\u5411\u56fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a 0 \u7684\u8fb9\uff0c\u7136\u540e\u4ee5\u8d85\u7ea7\u6e90\u70b9\u4e3a\u8d77\u70b9\u6267\u884c Bellman\u2013Ford \u7b97\u6cd5\u3002</p> <pre><code>#\u7528\u4e8e\u66b4\u529b\u6c42\u89e3\u5355\u6e90\u6700\u77ed\u8def\u5f84\n#\u540c\u65f6\u53ef\u4ee5\u5224\u65ad\u4e00\u5f20\u56fe\u4e0a\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u5f53\u6700\u540e\u4e00\u8f6e\u677e\u5f1b\u65f6\uff0c\u4ecd\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u5b58\u5728\u8d1f\u73af\n#\u8be5\u7b97\u6cd5\u53ef\u4ee5\u6c42\u51fa\u6709\u8d1f\u6743\u7684\u56fe\u7684\u6700\u77ed\u8def\n#\u65f6\u95f4\u590d\u6742\u5ea6O\uff08nm\uff09\nimport sys\nclass Edge:\n    def __init__(self,u = 0,v = 0,e = 0):\n        self.v = v\n        self.u = u\n        self.e = e\nINF = 0x3F3F3F3F\nedge = []\ndef solve():\n    n ,m, s = map(int ,input().split())\n    for _ in range(m):\n        u ,v ,e = map(int ,input().split())\n        edge.append(Edge(u,v,e))\n    dis = [INF] * (n + 1)\n    dis[s] = 0\n    def bellman_ford(n,s):\n        flag = False\n        for i in range(n):\n            flag = False\n            for i in edge:\n                u ,v ,e = i.u , i.v , i.e\n                if dis[u] == INF:continue\n                if dis[v] &gt; dis[u] + e:\n                    dis[v] = dis[u] + e\n                    flag = True\n            if not flag:#\u8868\u793a\u5f53\u524d\u6ca1\u6709\u65b0\u7684\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u88ab\u66f4\u65b0\n                break\n        return flag\n    if not bellman_ford(n, s):  # \u8bf4\u660e\u4e0d\u5b58\u5728\u8d1f\u73af\n        for i in range(1, n + 1):\n            print(dis[i], end=' ')\nif __name__ == '__main__':\n    solve()\n</code></pre> <p>SPFA :\u5bf9\u4e8ebellman_ford\u7b97\u6cd5\u8fdb\u884c\u4f18\u5316\uff0c\u6bcf\u4e00\u6b21\u677e\u5f1b\u53ea\u5bf9\u4e0a\u4e00\u6b21\u677e\u5f1b\u4e2d\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u4e3a\u51fa\u53d1\u70b9\u7684\u8fb9\u8fdb\u884c\u677e\u5f1b\uff0c\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u677e\u5f1b</p> <pre><code>from collections import deque\nclass Edge:\n    def __init__(self, v=0, w=0):\n        self.v = v\n        self.w = w\ne = [[Edge() for i in range(MAXN)] for j in range(MAXN)]\nINF = 0x3F3F3F3F\ndef spfa(n, s):\n    dis = [INF] * (n + 1)\n    cnt = [0] * (n + 1)\n    vis = [False] * (n + 1)\n    q = deque()\n\n    dis[s] = 0\n    vis[s] = True\n    q.append(s)\n    while q:\n        u = q.popleft()\n        vis[u] = False\n        for ed in e[u]:\n            v, w = ed.v, ed.w\n            if dis[v] &gt; dis[u] + w:\n                dis[v] = dis[u] + w\n                cnt[v] = cnt[u] + 1  # \u8bb0\u5f55\u6700\u77ed\u8def\u7ecf\u8fc7\u7684\u8fb9\u6570\n                if cnt[v] &gt;= n:\n                    return False\n                # \u5728\u4e0d\u7ecf\u8fc7\u8d1f\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u77ed\u8def\u81f3\u591a\u7ecf\u8fc7 n - 1 \u6761\u8fb9\n                # \u56e0\u6b64\u5982\u679c\u7ecf\u8fc7\u4e86\u591a\u4e8e n \u6761\u8fb9\uff0c\u4e00\u5b9a\u8bf4\u660e\u7ecf\u8fc7\u4e86\u8d1f\u73af\n                if not vis[v]:\n                    q.append(v)\n                    vis[v] = True\n</code></pre>"},{"location":"algorithms/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#dijkstra","title":"Dijkstra","text":"<ol> <li>\u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff1a\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u70b9\u96c6\uff08\u8bb0\u4e3a \ud835\udc46 \u96c6\u5408\uff09\u7684\u548c\u672a\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u70b9\u96c6\uff08\u8bb0\u4e3a \ud835\udc47 \u96c6\u5408\uff09\u3002\u4e00\u5f00\u59cb\u6240\u6709\u7684\u70b9\u90fd\u5c5e\u4e8e \ud835\udc47 \u96c6\u5408\u3002</li> <li>\u521d\u59cb\u5316 \ud835\udc51\ud835\udc56\ud835\udc60(\ud835\udc60) =0\uff0c\u5176\u4ed6\u70b9\u7684 \ud835\udc51\ud835\udc56\ud835\udc60 \u5747\u4e3a +\u221e\u3002</li> <li>\u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c</li> <li>\u4ece \ud835\udc47 \u96c6\u5408\u4e2d\uff0c\u9009\u53d6\u4e00\u4e2a\u6700\u77ed\u8def\u957f\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u79fb\u5230 \ud835\udc46 \u96c6\u5408\u4e2d\u3002</li> <li>\u5bf9\u90a3\u4e9b\u521a\u521a\u88ab\u52a0\u5165 \ud835\udc46 \u96c6\u5408\u7684\u7ed3\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u6267\u884c\u677e\u5f1b\u64cd\u4f5c\u3002</li> </ol>"},{"location":"algorithms/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#_1","title":"\u6734\u7d20\u5b9e\u73b0 \u9002\u7528\u4e8e\u7a20\u5bc6\u56fe","text":"<pre><code>import sys\nclass Edge:\n    def __init__(self, v = 0,w = 0):\n        self.v = v\n        self.w = w\ndef dijkstra(n ,e, s):\n    INF = 0x3F3F3F3F\n    dist = [INF] * (n + 1)\n    st = [False] * (n + 1)\n    dist[s] = 0\n    for i in range(1,n + 1):\n        u = 0\n        mind = INF\n        for j in range(1 , n + 1):\n            if not st[j] and dist[j] &lt; mind:\n                u = j\n                mind = dist[j]\n        st[u] = True\n        for ed in e[u]:\n            v , w = ed.v , ed.w\n            if dist[v] &gt; dist[u] + w:\n                dist[v] = dist[u] + w\n    return dist\ndef solve():\n    n , m , s = map(int ,input().split())\n    e = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u , v , w = map(int ,input().split())\n        e[u].append(Edge(v,w))\n    dist = dijkstra(n,e,s)\n    for i in range(1,n + 1):\n        print(dist[i],end = ' ')\n\nif __name__ == '__main__':\n    solve()\n</code></pre>"},{"location":"algorithms/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#_2","title":"\u4f18\u5148\u961f\u5217\u4f18\u5316 \u9002\u7528\u4e8e\u7a00\u758f\u56fe","text":"<pre><code>#\u6c42\u89e3\u975e\u8d1f\u6743\u56fe\u4e0a\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\nimport heapq\ndef dijkstra(n,edges,s):\n    #\u6784\u5efa\u90bb\u63a5\u8868\n    e = {}\n    for u , v ,w in edges:\n        if u not in e:\n            e[u] = []\n        e[u].append((v,w))\n    INF = 0x3F3F3F3F\n    dist = [INF] * (n + 1)\n    dist[s] = 0\n    q = [(0,s)]\n    st = [False] * (n + 1)\n    while q:\n        d,u = heapq.heappop(q)\n        if d != dist[u]:continue\n        st[u] = True\n        if u in e:\n            for v , w in e[u]:\n                if not st[v] and dist[v] &gt; dist[u] + w:\n                    dist[v] = dist[u] + w\n                    heapq.heappush(q,(dist[v],v))\n    return dist\ndef solve():\n    n , m, s = map(int ,input().split())\n    edges = []\n    for _ in range(m):\n        u,v,w = map(int ,input().split())\n        edges.append((u,v,w))\n    dist = dijkstra(n,edges,s)\n    for i in range(1,n + 1):\n        print(dist[i],end =' ')\nif __name__ == '__main__':\n    solve()\n</code></pre>"},{"location":"algorithms/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/","title":"\u591a\u6e90\u6700\u77ed\u8def","text":""},{"location":"algorithms/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#floyd","title":"Floyd","text":"<p>\u9002\u7528\u4e8e\u4efb\u4f55\u56fe\uff0c\u4e0d\u7ba1\u6709\u5411\u65e0\u5411\uff0c\u8fb9\u6743\u6b63\u8d1f\uff0c\u4f46\u662f\u6700\u77ed\u8def\u5fc5\u987b\u5b58\u5728\u3002\uff08\u4e0d\u80fd\u6709\u4e2a\u8d1f\u73af\uff09</p> <ol> <li>\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4 <code>f[k][x][y]</code>\uff0c\u8868\u793a\u53ea\u5141\u8bb8\u7ecf\u8fc7\u7ed3\u70b9 1 \u5230 \ud835\udc58\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u5b50\u56fe \ud835\udc49\u2032 =1,2,\u2026,\ud835\udc58 \u4e2d\u7684\u8def\u5f84\uff0c\u6ce8\u610f\uff0c\ud835\udc65 \u4e0e \ud835\udc66 \u4e0d\u4e00\u5b9a\u5728\u8fd9\u4e2a\u5b50\u56fe\u4e2d\uff09\uff0c\u7ed3\u70b9 \ud835\udc65 \u5230\u7ed3\u70b9 \ud835\udc66 \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002<code>f[n][x][y]</code> \u5c31\u662f\u7ed3\u70b9 \ud835\udc65 \u5230\u7ed3\u70b9 \ud835\udc66 \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002</li> </ol> <pre><code>for k in range(1, n + 1):\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            f[x][y] = min(f[x][y], f[x][k] + f[k][y])\n</code></pre> <pre><code>#\u4f8b\u9898\uff1ahttps://www.luogu.com.cn/problem/P2910\ndef solve():\n    n,m = map(int ,input().split())\n    a = []\n    edges = []\n    for _ in range(m):\n        x = int(input())\n        a.append(x)\n    f = [[[0] for _ in range(n + 1)]for i in range(n + 1)]\n    for i in range(1,n + 1):\n        b = [0] + list(map(int,input().split()))\n        for _ in range(1,n + 1):\n            f[i][_] = b[_]\n    for k in range(1,n + 1):\n        for x in range(1,n + 1):\n            for y in range(1,n + 1):\n                f[x][y] = min(f[x][y] , f[x][k] + f[k][y])\n    ans = 0\n    for i in range(len(a) - 1):\n        x = a[i]\n        y = a[i + 1]\n        ans += f[x][y]\n    print(ans)\n\nif __name__ == '__main__':\n    solve()\n</code></pre>"},{"location":"blog/git/","title":"Blog","text":""},{"location":"blog/git/#pushgithub","title":"\u5c06\u66f4\u65b0\u5b8c\u7684\u535a\u5ba2push\u5230github\u4e0a","text":"<pre><code>1.git add .\n2.git commit \n3.esc\n4.shift + :\n5.\u8f93\u5165wq\n6.git push origin master\n</code></pre>"},{"location":"python/%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/","title":"\u56fd\u5185\u955c\u50cf","text":""},{"location":"python/%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/#_1","title":"\u56fd\u5185\u955c\u50cf\u7f51\u5740","text":"<p>python\u4e0b\u8f7d\u5305\u4f7f\u7528\u56fd\u5185\u955c\u50cf\u65b9\u6cd5</p> <p><code>pip install -i \u955c\u50cf\u7f51\u5740 \u5305\u540d</code></p> <p>\u6e05\u534e</p> <p><code>https://pypi.tuna.tsinghua.edu.cn/simple</code></p> <p>\u963f\u91cc\u4e91</p> <p><code>https://mirrors.aliyun.com/pypi/simple/</code></p> <p>\u817e\u8baf\u4e91</p> <p><code>https://mirrors.cloud.tencent.com/pypi/simple</code></p> <p>\u534e\u4e3a\u4e91</p> <p><code>https://repo.huaweicloud.com/repository/pypi/simple</code></p>"},{"location":"python/Scipy/optimize/","title":"Optimize","text":""},{"location":"python/Scipy/optimize/#minimize","title":"minimize()","text":"<p><code>minimize()</code> \u662f SciPy \u5e93\u4e2d <code>scipy.optimize</code> \u6a21\u5757\u63d0\u4f9b\u7684\u4e00\u4e2a**\u9ad8\u9636\u51fd\u6570**\u3002\u5b83\u7684\u4e3b\u8981\u4efb\u52a1\u662f**\u5bfb\u627e\u7ed9\u5b9a\u51fd\u6570\uff08\u79f0\u4e3a\u201c\u76ee\u6807\u51fd\u6570\u201d\u6216\u201c\u6210\u672c\u51fd\u6570\u201d\uff09\u7684\u6700\u5c0f\u503c**\u3002</p> <p>\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4f60\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u51fd\u6570\u540d\uff0c\u8be5\u51fd\u6570\u88ab\u79f0\u4e3a\u76ee\u6807\u4f18\u5316\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8981\u6c42\u6709\u8fd4\u56de\u503c\uff0cminimize()\u51fd\u6570\u4f20\u5165\u4e0d\u540c\u7684\u53c2\u6570\uff0c\u6c42\u7684\u8fd4\u56de\u503c\u6700\u5c0f\u7684\u7ed3\u679c\uff0c\u5e76\u5c06\u53c2\u6570\u4ee5 <code>OptimizeResult</code> \u5bf9\u8c61\u7684\u5f62\u5f0f\u8fd4\u56de\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u8c03\u7528\u7684\u51fd\u6570\u6240\u8981\u4f20\u5165\u7684\u53c2\u6570\uff0c\u5373\u8981\u6c42\u89e3\u7684\u672a\u77e5\u53d8\u91cf\u7684\u521d\u59cb\u503c\uff0c\uff08\u4e00\u4e2a\u597d\u7684\u521d\u59cb\u731c\u6d4b\u53ef\u4ee5\u5e2e\u52a9\u7b97\u6cd5\u66f4\u5feb\u5730\u627e\u5230\u6700\u4f18\u89e3\u3002\uff09\u7b2c\u4e09\u4e2a\u53c2\u6570\u662fmethod\u53c2\u6570\uff0c<code>method</code> \u53c2\u6570\u6307\u5b9a\u4e86 <code>minimize()</code> \u51fd\u6570\u5185\u90e8\u5c06\u91c7\u7528\u54ea\u79cd**\u4f18\u5316\u7b97\u6cd5**\u6765\u5bfb\u627e\u6700\u5c0f\u503c\uff0c\u5176\u4e2d<code>method='Nelder-Mead'</code> (\u5355\u7eaf\u5f62\u6cd5)\u9002\u7528\u4e8e**\u76ee\u6807\u51fd\u6570\u4e0d\u53ef\u5bfc\u6216\u68af\u5ea6\u4e0d\u8fde\u7eed\u7684\u573a\u666f**\uff08\u4f8b\u5982\uff0c\u5305\u542b <code>if</code> \u8bed\u53e5\u3001<code>np.abs()</code> \u7b49\uff09\u3002</p> <p><code>result.x</code>: \u6700\u91cd\u8981\u7684\u5c5e\u6027\uff01 \u8fd9\u5c31\u662f\u4f18\u5316\u7b97\u6cd5\u627e\u5230\u7684**\u6700\u4f73\u53c2\u6570\u503c**\uff08\u4e00\u4e2a NumPy \u6570\u7ec4\uff09\u3002\u8fd9\u4e9b\u53c2\u6570\u662f\u4f7f <code>objective</code> \u51fd\u6570\u6700\u5c0f\u5316\u7684\u8f93\u5165\u3002</p> <p><code>result.fun</code>: \u76ee\u6807\u51fd\u6570\u5728 <code>result.x</code> \u5904\u7684\u6700\u5c0f\u503c\u3002</p> <p><code>result.nit</code>: \u8fed\u4ee3\u6b21\u6570\u3002</p> <p><code>result.success</code>: \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u4f18\u5316\u662f\u5426\u6210\u529f\u6536\u655b\u3002</p> <p><code>result.message</code>: \u63cf\u8ff0\u4f18\u5316\u7ed3\u679c\u7684\u6587\u672c\u4fe1\u606f\u3002</p> <pre><code>result = minimize(objective, initial_params, method='Nelder-Mead')\n</code></pre>"},{"location":"python/Seaborn/seaborn/","title":"Seaborn","text":""},{"location":"python/Seaborn/seaborn/#set_style","title":"set_style","text":"<p>\u8bbe\u7f6e\u56fe\u8868\u7684\u663e\u793a\u80cc\u666f\u4e3a\u767d\u8272\u7f51\u683c\uff0c\u62ec\u53f7\u5185\u7684\u80cc\u666f\u6837\u5f0f\u53ef\u4ee5\u66ff\u4ee3\u4e3a</p> <p><code>\"darkgrid\"</code>: \u9ed8\u8ba4\u98ce\u683c\uff0c\u6df1\u7070\u8272\u80cc\u666f\uff0c\u767d\u8272\u7f51\u683c\u7ebf\u3002</p> <p><code>\"white\"</code>: \u767d\u8272\u80cc\u666f\uff0c\u6ca1\u6709\u7f51\u683c\u7ebf\u3002</p> <p><code>\"dark\"</code>: \u6df1\u7070\u8272\u80cc\u666f\uff0c\u6ca1\u6709\u7f51\u683c\u7ebf\u3002</p> <p><code>\"ticks\"</code>: \u7c7b\u4f3c <code>\"white\"</code> \u98ce\u683c\uff0c\u4f46\u4f1a\u5728\u8f74\u4e0a\u6dfb\u52a0\u523b\u5ea6\u7ebf\u3002</p> <pre><code>sns.set_style(\"whitegrid\")\n</code></pre>"},{"location":"python/Seaborn/seaborn/#set_palette","title":"set_palette","text":"<p>\u8bbe\u7f6e\u56fe\u8868\u7684\u989c\u8272\u65b9\u6848\uff0chusl\u662f\u4e00\u79cd\u5bf9\u4eba\u7c7b\u611f\u77e5\u66f4\u5747\u5300\u7684\u65b9\u5f0f\u6765\u8868\u793a\u989c\u8272\u3002</p> <pre><code>sns.set_palette(\"husl\")\n</code></pre>"},{"location":"python/Seaborn/seaborn/#lineplot","title":"lineplot()","text":"<p>\u5176\u4e2d\u5305\u542b\u591a\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u4e00**<code>x=t</code>: \u8868\u793aX\u8f74\u7684\u6570\u636e\uff0c\u53c2\u6570\u4e8c<code>y=flow</code>:\u8868\u793aY\u8f74\u7684\u6570\u636e\uff0c\u53c2\u6570\u4e09<code>marker='o'</code>: \u8868\u793a\u6570\u636e\u70b9\u7684\u6807\u8bb0\u6837\u5f0f\uff0c\u53c2\u6570\u56db<code>label='\u4e3b\u8def3\u5b9e\u9645\u8f66\u6d41\u91cf'</code>: \u4e3a\u8fd9\u6761\u6298\u7ebf\u56fe\u8bbe\u7f6e**\u56fe\u4f8b\u6807\u7b7e\u3002\u53c2\u6570\u4e94**<code>linewidth=2</code>: \u8bbe\u7f6e\u6298\u7ebf\u7684**\u5bbd\u5ea6\u3002\u53c2\u6570\u516d**<code>linestyle='--'</code>: \u8bbe\u7f6e\u6298\u7ebf\u7684**\u6837\u5f0f\u3002</p> <pre><code>sns.lineplot(x=t, y=flow, marker='o', label='\u4e3b\u8def3\u5b9e\u9645\u8f66\u6d41\u91cf', linewidth=2)\n</code></pre>"},{"location":"python/matplotlib/pyplot/","title":"Pyplot","text":""},{"location":"python/matplotlib/pyplot/#style","title":"style()","text":"<p>\u8ba9\u6211\u4eec\u9700\u8981\u663e\u793a\u7684\u56fe\u6807\u7684\u6837\u5f0f\u662fSeaborn\u5e93\u9ed8\u8ba4\u7684\u6837\u5f0f\uff0c\u76f8\u5f53\u4e8e\u4e00\u952e\u7f8e\u5316\u56fe\u8868</p> <pre><code>pyl.style.use('seaborn-v0_8')\n</code></pre>"},{"location":"python/matplotlib/pyplot/#figure","title":"figure()","text":"<p>\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u56fe\u5f62\u5bf9\u8c61\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4ee3\u8868\u521b\u5efa\u56fe\u5f62\u7684\u5bbd\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4ee3\u8868\u521b\u5efa\u56fe\u5f62\u7684\u9ad8\u5ea6\uff0c\u5355\u4f4d\u4e3a\u82f1\u5bf8\uff0c\u53ef\u4ee5\u4f7f\u7528figsize\u63a7\u5236\u6700\u7ec8\u8f93\u51fa\u56fe\u50cf\u7684\u5927\u5c0f\u3002</p> <pre><code>plt.figure(figsize=(14, 10))\n</code></pre>"},{"location":"python/matplotlib/pyplot/#subplotabc","title":"subplot(a,b,c)","text":"<p>\u5728\u5df2\u6709\u56fe\u5f62\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u56fe\u5f62\u5206\u5272\u4e3aa\u884cb\u5217\u7684\u7f51\u683c\uff0c\u5e76\u5728\u5206\u5272\u51fa\u7684\u7b2cc\u4e2a\u7f51\u683c\u4e2d\u5f00\u59cb\u7ed8\u5236\u56fe\u8868</p>"},{"location":"python/matplotlib/pyplot/#xlabel-ylabel","title":"xlabel() ylabel()","text":"<p>\u8bbe\u7f6e\u56fe\u8868\u7684X\u8f74\u548cY\u8f74\u6807\u7b7e\uff0c\u5176\u4e2dfontsize\u662f\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u7528\u4e8e\u6307\u5b9a\u6807\u7b7e\u6587\u672c\u7684\u5b57\u4f53\u5927\u5c0f</p> <pre><code>plt.xlabel('\u65f6\u95f4t (\u76f8\u5bf9\u4e8e7:00\u7684\u5206\u949f\u6570/2)', fontsize=12)\n\nplt.ylabel('\u8f66\u6d41\u91cf', fontsize=12)\n</code></pre>"},{"location":"python/matplotlib/pyplot/#title","title":"title()","text":"<p>\u8bbe\u7f6e\u56fe\u8868\u4e3b\u6807\u9898\uff0c\u53c2\u6570\u4e00**'\u95ee\u98981\uff1a\u4e3b\u8def3\u8f66\u6d41\u91cf\u9884\u6d4b\u7ed3\u679c'\u662f\u6807\u9898\u540d\u79f0\uff0c\u53c2\u6570\u4e8c<code>fontsize=14</code>: \u7528\u4e8e\u6307\u5b9a\u6807\u9898\u6587\u672c\u7684**\u5b57\u4f53\u5927\u5c0f\uff0c\u53c2\u6570\u4e09**<code>pad=20</code>: \u7528\u4e8e\u63a7\u5236\u6807\u9898\u4e0e\u56fe\u8868\u9876\u90e8\u6216 <code>Axes</code> \u533a\u57df\u4e4b\u95f4\u7684**\u5782\u76f4\u95f4\u8ddd\u3002</p> <pre><code>plt.title('\u95ee\u98981\uff1a\u4e3b\u8def3\u8f66\u6d41\u91cf\u9884\u6d4b\u7ed3\u679c', fontsize=14, pad=20)\n</code></pre>"},{"location":"python/matplotlib/pyplot/#grid","title":"grid()","text":"<p>\u7528\u4e8e\u5728\u5f53\u524d\u6fc0\u6d3b\u56fe\u8868\u4e0a\u663e\u793a\u6216\u8005\u9690\u85cf\u7f51\u683c\u7ebf\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u901a\u5e38\u4e3a\u4e00\u4e2abool\u503c\uff0cTrue\u8868\u793a\u4f7f\u7528\u7f51\u683c\u7ebf\uff0cFalse\u8868\u793a\u7981\u7528\u7f51\u683c\u7ebf\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570**<code>alpha=0.3</code>: \u8fd9\u662f\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u7f51\u683c\u7ebf\u7684**\u900f\u660e\u5ea6\uff08alpha \u503c\uff09\u3002</p> <pre><code>plt.grid(True, alpha=0.3)\n</code></pre>"},{"location":"python/matplotlib/pyplot/#legend","title":"legend()","text":"<p>\u7528\u4e8e\u5728\u56fe\u8868\u4e2d\u663e\u793a\u56fe\u4f8b\uff0c\u53c2\u6570fontsize = 10:\u7528\u4e8e\u8868\u793a\u56fe\u4f8b\u5b57\u4f53\u5927\u5c0f</p>"},{"location":"python/matplotlib/pyplot/#tight_layout","title":"tight_layout()","text":"<p>\u7528\u4e8e**\u81ea\u52a8\u8c03\u6574\u5b50\u56fe\u53c2\u6570\uff0c\u4f7f\u4e4b\u80fd\u591f\u7d27\u5bc6\u5730\u586b\u5145\u6574\u4e2a Figure \u533a\u57df\uff0c\u5e76\u907f\u514d\u5b50\u56fe\u4e4b\u95f4\u6216\u5b50\u56fe\u4e0e Figure \u8fb9\u7f18\u4e4b\u95f4\u7684\u6807\u7b7e\u3001\u6807\u9898\u7b49\u6587\u672c\u91cd\u53e0**\u3002</p>"},{"location":"python/matplotlib/pyplot/#save-fig","title":"save fig()","text":"<p>\u7528\u4e8e\u4fdd\u5b58\u751f\u6210\u7684\u56fe\u8868\uff0c\u53c2\u6570\u4e00**<code>'Q-1_\u9884\u6d4b\u7ed3\u679c.png'</code>: \u4f20\u9012\u4e86\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\u548c\u6587\u4ef6\u7684\u683c\u5f0f\uff0c\u53c2\u6570\u4e8c**dpi=300\uff1a\u63a7\u5236\u4e86\u4fdd\u5b58\u56fe\u50cf\u7684**\u5206\u8fa8\u7387**\u6216**\u6e05\u6670\u5ea6**\uff0c\u53c2\u6570\u4e09**<code>bbox_inches='tight'</code>:\u63a7\u5236\u4e86\u4fdd\u5b58\u56fe\u50cf\u7684**\u88c1\u526a\u65b9\u5f0f\u3002\u81ea\u52a8\u88c1\u526a\u6389\u56fe\u50cf\u5468\u56f4\u591a\u4f59\u7684\u7a7a\u767d\u533a\u57df\uff0c\u4f7f\u5f97\u56fe\u8868\u7684\u6240\u6709\u53ef\u89c1\u5143\u7d20\uff08\u5305\u62ec\u6807\u9898\u3001\u8f74\u6807\u7b7e\u3001\u523b\u5ea6\u6807\u7b7e\u3001\u56fe\u4f8b\u7b49\uff09\u90fd\u80fd\u7d27\u5bc6\u5730\u5305\u542b\u5728\u6700\u7ec8\u7684\u56fe\u50cf\u6587\u4ef6\u4e2d\uff0c\u800c\u4e0d\u4f1a\u6709\u592a\u591a\u7684\u7a7a\u8fb9\u3002</p> <pre><code>plt.savefig('Q-1_\u9884\u6d4b\u7ed3\u679c.png', dpi=300, bbox_inches='tight')\n</code></pre>"},{"location":"python/matplotlib/pyplot/#show","title":"show()","text":"<p>\u5b83\u8d1f\u8d23**\u663e\u793a\u6240\u6709\u5f53\u524d\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u7684 Matplotlib \u56fe\u5f62\u7a97\u53e3**\u3002</p> <pre><code>plt.show()\n</code></pre>"},{"location":"python/numpy/numpy/","title":"Numpy","text":""},{"location":"python/numpy/numpy/#zeros_like","title":"zeros_like()","text":"<p>\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u4e0e\u5df2\u77e5\u53d8\u91cf\u7c7b\u578b\u76f8\u540c\uff0c\u5f62\u72b6\u76f8\u540c\u7684\u5e76\u4e14\u6307\u5b9a\u5143\u7d20\u7c7b\u578b\u7684\u65b0\u53d8\u91cf\uff0c\u4e14\u6240\u6709\u5143\u7d20\u503c\u521d\u59cb\u5316\u4e3a0</p> <p>\u5982\u4e0b\u5373\u521b\u5efa\u4e00\u4e2a\u4e0et\u53d8\u91cf\u7c7b\u578b\u76f8\u540c\uff0c\u5f62\u72b6\u76f8\u540c\u7684\u5e76\u4e14\u6240\u6709\u5143\u7d20\u5168\u662f\u6d6e\u70b9\u6570\u7684\u6570\u503c\u5168\u4e3a0\u7684\u65b0\u53d8\u91cff2</p> <pre><code>f2 = np.zeros_like(t, dtype=float)\n</code></pre>"},{"location":"python/numpy/numpy/#_1","title":"\u5e03\u5c14\u7d22\u5f15\u5728\u5206\u6bb5\u51fd\u6570\u4e2d\u7684\u5e94\u7528","text":"<p>\u5e38\u7528\u4e8e\u8868\u793a\u5206\u6bb5\u51fd\u6570\uff0c\u5c06\u7279\u5b9a\u7684\u53d8\u91cf\u5bf9\u5e94\u7684\u8303\u56f4\u5bf9\u5e94\u4e8e\u7279\u5b9a\u7684\u51fd\u6570\uff0c\u4f8b\uff1a</p> <pre><code>f2[t &lt;= t_breakpoint] = c * t[t &lt;= t_breakpoint] + d\n</code></pre>"},{"location":"python/numpy/numpy/#sum","title":"sum()","text":"<p>\u7528\u4e8e\u8ba1\u7b97\u8f93\u5165\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u7684\u603b\u548c\uff0c\u5982\u4e0b\u662f\u5728\u6c42\u6b8b\u5dee\u5e73\u65b9\u548c\u7684\u5e94\u7528</p> <pre><code>error = np.sum((f3_pred - flow) ** 2)\n</code></pre>"},{"location":"python/numpy/numpy/#abs","title":"abs()","text":"<p>\u7528\u4e8e\u8ba1\u7b97\u4f20\u5165\u53c2\u6570\u7684\u7edd\u5bf9\u503c</p>"},{"location":"python/numpy/numpy/#sqrt-mean","title":"sqrt() mean()","text":"<p>Sqrt()\u51fd\u6570\u8ba1\u7b97\u8f93\u5165\u503c\u7684\u5e73\u65b9\u6839</p> <p>Mean()\u51fd\u6570\u8ba1\u7b97\u8f93\u5165\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u7684\u5e73\u5747\u503c</p> <p>\u4ee5\u4e0a\u4e24\u79cd\u51fd\u6570\u5e38\u7528\u4e8e\u6c42\u89e3\u5747\u65b9\u6839\u8bef\u5dee</p> <pre><code>rmse = np.sqrt(np.mean((f3_pred - flow) ** 2))\n</code></pre>"},{"location":"%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/Matlab/","title":"Matlab","text":"<p>math model</p> <p>this is my info here.</p>"},{"location":"%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/2025_51_A/%E7%AC%AC%E4%B8%80%E9%97%AE/","title":"\u7b2c\u4e00\u95ee","text":""},{"location":"%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/2025_51_A/%E7%AC%AC%E4%B8%80%E9%97%AE/#_1","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>import numpy as np#\u7528\u4e8e\u6570\u503c\u8ba1\u7b97\nimport matplotlib.pyplot as plt#\u57fa\u7840\u7ed8\u56fe\nimport seaborn as sns#\u589e\u5f3a\u578b\u7edf\u8ba1\u53ef\u89c6\u5316\nimport plotly.graph_objects as go#plotly \u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316\nimport plotly.express as px\nfrom scipy.optimize import minimize#\u4f18\u5316\u7b97\u6cd5\nimport pandas as pd#\u6570\u636e\u5904\u7406\n# \u8bbe\u7f6e\u6837\u5f0f\nplt.style.use('seaborn-v0_8')\nsns.set_style(\"whitegrid\")#\u542f\u7528\u767d\u8272\u7f51\u683c\u80cc\u666f\nsns.set_palette(\"husl\")#\u4f7f\u7528husl\u8c03\u8272\u677f\n\n# \u4e2d\u6587\u663e\u793a\u8bbe\u7f6e\nplt.rcParams['font.sans-serif'] = ['SimHei']  # \u7528\u6765\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u6807\u7b7e\uff0c\u4f7f\u7528SimHei\u5b57\u4f53\nplt.rcParams['axes.unicode_minus'] = False  # \u7528\u6765\u6b63\u5e38\u663e\u793a\u8d1f\u53f7\n\n# \u8bfb\u53d6\u88681\u6570\u636e\ndata = pd.DataFrame({\n    '\u65f6\u523b': ['07:00', '07:02', '07:04', '07:06', '07:08', '07:10', '07:12', '07:14', '07:16', '07:18', '07:20', '07:22',\n             '07:24', '07:26', '07:28', '07:30', '07:32', '07:34', '07:36', '07:38', '07:40', '07:42', '07:44', '07:46',\n             '07:48', '07:50', '07:52', '07:54', '07:56', '07:58', '08:00', '08:02', '08:04', '08:06', '08:08', '08:10',\n             '08:12', '08:14', '08:16', '08:18', '08:20', '08:22', '08:24', '08:26', '08:28', '08:30', '08:32', '08:34',\n             '08:36', '08:38', '08:40', '08:42', '08:44', '08:46', '08:48', '08:50', '08:52', '08:54', '08:56',\n             '08:58'],\n    '\u65f6\u95f4t': list(range(60)),\n    '\u4e3b\u8def3\u8f66\u6d41\u91cf': [7.00, 8.50, 10.00, 11.50, 13.00, 14.50, 16.00, 17.50, 19.00, 20.50, 22.00, 23.50, 25.00, 26.50,\n                    28.00, 29.50, 31.00, 32.50, 34.00, 35.50, 37.00, 38.50, 40.00, 41.50, 43.00, 44.50, 46.00, 47.50,\n                    49.00, 50.50, 52.00, 51.50, 51.00, 50.50, 50.00, 49.50, 49.00, 48.50, 48.00, 47.50, 47.00, 46.50,\n                    46.00, 45.50, 45.00, 44.50, 44.00, 43.50, 43.00, 42.50, 42.00, 41.50, 41.00, 40.50, 40.00, 39.50,\n                    39.00, 38.50, 38.00, 37.50]\n})\n\n# \u63d0\u53d6\u65f6\u95f4\u548c\u8f66\u6d41\u91cf\u6570\u636e\nt = data['\u65f6\u95f4t'].values\nflow = data['\u4e3b\u8def3\u8f66\u6d41\u91cf'].values\n\n# \u89c2\u5bdf\u6570\u636e\u8d8b\u52bf\uff0c\u786e\u5b9a\u62d0\u70b9\nt_breakpoint = 30  # \u5bf9\u5e94\u65f6\u523b\u4e3a8:00\n\n#\u8fd9\u4e2a objective \u51fd\u6570\u662f\u4e00\u4e2a\u4f18\u5316\u76ee\u6807\u51fd\u6570\uff0c\u7528\u4e8e\u62df\u5408\u6570\u636e\u6216\u89e3\u51b3\u9006\u95ee\u9898\u3002\n#\u76ee\u6807\u662f\u8861\u91cf\u4e00\u7ec4\u53c2\u6570 params \u6240\u9884\u6d4b\u7684\u503c\u4e0e\u5b9e\u9645\u89c2\u6d4b\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\uff0c\u5e76\u7ed3\u5408\u4e00\u4e9b\u60e9\u7f5a\u9879\u6765\u5f15\u5bfc\u4f18\u5316\u8fc7\u7a0b\uff0c\u4f7f\u5176\u627e\u5230\u201c\u66f4\u597d\u201d\u7684\u53c2\u6570\u7ec4\u5408\u3002\ndef objective(params):\n    a, b, c, d, e, g = params#\u5143\u7ec4\u4f9d\u6b21\u8d4b\u503c\n    f1 = a * t + b\n    f2 = np.zeros_like(t, dtype=float)\n    f2[t &lt;= t_breakpoint] = c * t[t &lt;= t_breakpoint] + d\n    f2[t &gt; t_breakpoint] = e * t[t &gt; t_breakpoint] + g\n    f3_pred = f1 + f2\n    error = np.sum((f3_pred - flow) ** 2)\n    penalty = 0#\u521d\u59cb\u5316\u4e00\u4e2a\u60e9\u7f5a\u9879\u53d8\u91cf\u3002\u8fd9\u4e2a\u53d8\u91cf\u5c06\u7528\u4e8e\u7d2f\u79ef\u8fdd\u53cd\u6a21\u578b\u7ea6\u675f\u6216\u671f\u671b\u884c\u4e3a\u7684\u201c\u6210\u672c\u201d\u3002\n    # \u786e\u4fdd\u652f\u8def1\u659c\u7387\u4e3a\u6b63\u4e14\u8f83\u5927\n    if a &lt;= 0.3:  # Changed from 0 to 0.3 to encourage steeper slope\n        penalty += 1000 * np.abs(a - 0.3)\n    if np.any(f1 &lt; 0):\n        penalty += 1000 * np.sum(np.abs(f1[f1 &lt; 0]))\n    if np.any(f2 &lt; 0):\n        penalty += 1000 * np.sum(np.abs(f2[f2 &lt; 0]))\n    continuity_error = np.abs(c * t_breakpoint + d - (e * t_breakpoint + g))\n    penalty += 1000 * continuity_error\n    return error + penalty\n\n# \u8bbe\u5b9a\u521d\u59cb\u53c2\u6570\uff0c\u786e\u4fdda\u4e3a\u6b63\uff0c\u5728\u4f18\u5316\u8fc7\u7a0b\u4e2d\uff0c\u7b97\u6cd5\u9700\u8981\u4e00\u4e2a\u8d77\u70b9\u6765\u5f00\u59cb\u641c\u7d22\u6700\u4f73\u53c2\u6570\u3002\ninitial_params = [0.5, 3.0, 0.5, 2.0, -0.5, 47.0]  # Increased a from 0.2 to 0.5\n\n# \u4f18\u5316\u6c42\u89e3\n# \u8fd9\u662f SciPy \u5e93\u4e2d scipy.optimize \u6a21\u5757\u63d0\u4f9b\u7684\u4e00\u4e2a\u6838\u5fc3\u51fd\u6570\uff0c\u7528\u4e8e\u6267\u884c\u51fd\u6570\u6700\u5c0f\u5316\u3002\n# \u5b83\u7684\u4e3b\u8981\u76ee\u6807\u662f\u627e\u5230\u4f7f\u7ed9\u5b9a\u51fd\u6570\uff08\u5373\u4f60\u7684 objective \u51fd\u6570\uff09\u8f93\u51fa\u503c\u6700\u5c0f\u5316\u7684\u8f93\u5165\u53c2\u6570\u3002\nresult = minimize(objective, initial_params, method='Nelder-Mead')\na, b, c, d, e, g = result.x\n\n# \u8ba1\u7b97\u652f\u8def1\u548c\u652f\u8def2\u7684\u6d41\u91cf\nf1 = a * t + b\nf2 = np.zeros_like(t, dtype=float)\nf2[t &lt;= t_breakpoint] = c * t[t &lt;= t_breakpoint] + d\nf2[t &gt; t_breakpoint] = e * t[t &gt; t_breakpoint] + g\n\n# \u8ba1\u7b97\u4e3b\u8def3\u7684\u9884\u6d4b\u6d41\u91cf\nf3_pred = f1 + f2\n\n# \u8ba1\u7b97\u5747\u65b9\u6839\u8bef\u5dee\nrmse = np.sqrt(np.mean((f3_pred - flow) ** 2))\n\n# \u7ed8\u5236\u7ed3\u679c - \u4f7f\u7528seaborn\u589e\u5f3a\u6548\u679c\nplt.figure(figsize=(14, 10))\nplt.subplot(2, 1, 1)\nsns.lineplot(x=t, y=flow, marker='o', label='\u4e3b\u8def3\u5b9e\u9645\u8f66\u6d41\u91cf', linewidth=2)\nsns.lineplot(x=t, y=f3_pred, label='\u4e3b\u8def3\u9884\u6d4b\u8f66\u6d41\u91cf', linewidth=2, linestyle='--')\nplt.xlabel('\u65f6\u95f4t (\u76f8\u5bf9\u4e8e7:00\u7684\u5206\u949f\u6570/2)', fontsize=12)\nplt.ylabel('\u8f66\u6d41\u91cf', fontsize=12)\nplt.title('\u95ee\u98981\uff1a\u4e3b\u8def3\u8f66\u6d41\u91cf\u9884\u6d4b\u7ed3\u679c', fontsize=14, pad=20)\nplt.grid(True, alpha=0.3)\nplt.legend(fontsize=10)\n\nplt.subplot(2, 1, 2)\nsns.lineplot(x=t, y=f1, label='\u652f\u8def1\u8f66\u6d41\u91cf', linewidth=2)\nsns.lineplot(x=t, y=f2, label='\u652f\u8def2\u8f66\u6d41\u91cf', linewidth=2)\nplt.axvline(x=t_breakpoint, color='k', linestyle='--', label=f'\u652f\u8def2\u62d0\u70b9 (t={t_breakpoint})')\nplt.xlabel('\u65f6\u95f4t (\u76f8\u5bf9\u4e8e7:00\u7684\u5206\u949f\u6570/2)', fontsize=12)\nplt.ylabel('\u8f66\u6d41\u91cf', fontsize=12)\nplt.title('\u95ee\u98981\uff1a\u5404\u652f\u8def\u8f66\u6d41\u91cf', fontsize=14, pad=20)\nplt.grid(True, alpha=0.3)\nplt.legend(fontsize=10)\nplt.tight_layout()\n\n# \u4fdd\u5b58\u7b2c\u4e00\u4e2a\u56fe\u8868\nplt.savefig('Q-1_\u9884\u6d4b\u7ed3\u679c.png', dpi=300, bbox_inches='tight')\n\n# \u5806\u53e0\u56fe - \u4f7f\u7528seaborn\u589e\u5f3a\u6548\u679c\nplt.figure(figsize=(14, 8))\nsns.lineplot(x=t, y=flow, marker='o', label='\u4e3b\u8def3\u5b9e\u9645\u8f66\u6d41\u91cf', alpha=0.7, linewidth=2)\nsns.lineplot(x=t, y=f3_pred, label='\u4e3b\u8def3\u9884\u6d4b\u8f66\u6d41\u91cf', linewidth=2, linestyle='--')\nplt.fill_between(t, 0, f1, alpha=0.3, label='\u652f\u8def1\u8f66\u6d41\u91cf', color='green')\nplt.fill_between(t, f1, f1 + f2, alpha=0.3, label='\u652f\u8def2\u8f66\u6d41\u91cf', color='purple')\nplt.xlabel('\u65f6\u95f4t (\u76f8\u5bf9\u4e8e7:00\u7684\u5206\u949f\u6570/2)', fontsize=12)\nplt.ylabel('\u8f66\u6d41\u91cf', fontsize=12)\nplt.title('\u95ee\u98981\uff1a\u652f\u8def\u8f66\u6d41\u91cf\u53e0\u52a0\u53ca\u4e3b\u8def\u8f66\u6d41\u91cf\u6bd4\u8f83', fontsize=14, pad=20)\nplt.grid(True, alpha=0.3)\nplt.legend(fontsize=10)\nplt.tight_layout()\n\n# \u4fdd\u5b58\u7b2c\u4e8c\u4e2a\u56fe\u8868\nplt.savefig('Q-1_\u5806\u53e0\u56fe.png', dpi=300, bbox_inches='tight')\n\n# \u4fdd\u5b58\u7ed3\u679c\u5230\u6587\u4ef6\nwith open('Q-1_result.txt', 'w', encoding='utf-8') as f:\n    f.write(\"\u4f18\u5316\u7ed3\u679c\uff1a\\n\")\n    f.write(f\"\u652f\u8def1\u51fd\u6570\u53c2\u6570 (a, b): ({a:.6f}, {b:.6f})\\n\")\n    f.write(f\"\u652f\u8def2\u51fd\u6570\u53c2\u6570 (c, d): ({c:.6f}, {d:.6f})\\n\")\n    f.write(f\"\u652f\u8def2\u51fd\u6570\u53c2\u6570 (e, g): ({e:.6f}, {g:.6f})\\n\")\n    f.write(f\"\u652f\u8def2\u62d0\u70b9 (t_breakpoint): {t_breakpoint}\\n\")\n    f.write(f\"\\nRMSE: {rmse:.6f}\\n\")\n    f.write(\"\\n\u51fd\u6570\u8868\u8fbe\u5f0f\uff1a\\n\")\n    f.write(f\"\u652f\u8def1: f1(t) = {a:.6f}*t + {b:.6f}\\n\")\n    f.write(f\"\u652f\u8def2:\\n\")\n    f.write(f\"  \u5f53 t &lt;= {t_breakpoint} \u65f6: f2(t) = {c:.6f}*t + {d:.6f}\\n\")\n    f.write(f\"  \u5f53 t &gt; {t_breakpoint} \u65f6: f2(t) = {e:.6f}*t + {g:.6f}\\n\")\n\n# \u6253\u5370\u7ed3\u679c\nprint(\"\u4f18\u5316\u7ed3\u679c\uff1a\")\nprint(f\"\u652f\u8def1\u51fd\u6570\u53c2\u6570 (a, b): ({a:.6f}, {b:.6f})\")\nprint(f\"\u652f\u8def2\u51fd\u6570\u53c2\u6570 (c, d): ({c:.6f}, {d:.6f})\")\nprint(f\"\u652f\u8def2\u51fd\u6570\u53c2\u6570 (e, g): ({e:.6f}, {g:.6f})\")\nprint(f\"RMSE: {rmse:.6f}\")\n\n# \u5c55\u793a\u7ed3\u679c\u8868\u683c\nresult_df = pd.DataFrame({\n    '\u65f6\u523b': data['\u65f6\u523b'],\n    '\u65f6\u95f4t': t,\n    '\u4e3b\u8def3\u5b9e\u9645\u8f66\u6d41\u91cf': flow,\n    '\u4e3b\u8def3\u9884\u6d4b\u8f66\u6d41\u91cf': f3_pred,\n    '\u652f\u8def1\u8f66\u6d41\u91cf': f1,\n    '\u652f\u8def2\u8f66\u6d41\u91cf': f2\n})\nprint(\"\\n\u7ed3\u679c\u8868\u683c\uff08\u90e8\u5206\u5c55\u793a\uff09\uff1a\")\nprint(result_df.head(10))\n\n# \u6253\u5370\u51fd\u6570\u8868\u8fbe\u5f0f\nprint(\"\\n\u51fd\u6570\u8868\u8fbe\u5f0f\uff1a\")\nprint(f\"\u652f\u8def1: f1(t) = {a:.6f}*t + {b:.6f}\")\nprint(f\"\u652f\u8def2: f2(t) = {c:.6f}*t + {d:.6f} (t &lt;= {t_breakpoint})\")\nprint(f\"\u652f\u8def2: f2(t) = {e:.6f}*t + {g:.6f} (t &gt; {t_breakpoint})\")\n\n# \u663e\u793a\u56fe\u8868\nplt.show()\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}